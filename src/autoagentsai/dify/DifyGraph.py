# src/autoagentsai/dify/DifyGraph.py
import yaml
from typing import Optional, Dict, Any, List, Union
from copy import deepcopy

from .DifyNodeRegistry import DIFY_NODE_TEMPLATES
from .DifyTypes import (
    DifyConfig, DifyApp, DifyWorkflow, DifyGraphModel,
    DifyNode, DifyEdge, Position, Viewport, EdgeData,
    create_node_data, WorkflowFeatures, FileUpload
)


class DifyGraph:
    """
    Dify工作流图构建器
    
    用于构建Dify工作流配置的主要类，提供类似FlowGraph的API接口
    """
    
    def __init__(self, 
                 app_name: str = "AutoAgents Dify App",
                 app_description: str = "Generated by AutoAgents",
                 app_icon: str = "🤖",
                 app_icon_background: str = "#FFEAD5"):
        """
        初始化DifyGraph
        
        Args:
            app_name: 应用名称
            app_description: 应用描述
            app_icon: 应用图标
            app_icon_background: 图标背景色
        """
        self.config = DifyConfig(
            app=DifyApp(
                name=app_name,
                description=app_description,
                icon=app_icon,
                icon_background=app_icon_background
            ),
            workflow=DifyWorkflow(
                graph=DifyGraphModel()
            )
        )
        
        self.nodes: Dict[str, DifyNode] = {}
        self.edges: List[DifyEdge] = []
        self._node_counter = 1
        
        # 特殊节点标识
        self.START = "start"
        self.END = "end"
        
    def _generate_node_id(self) -> str:
        """生成唯一的节点ID"""
        node_id = str(self._node_counter * 1000000000000 + 71169250)
        self._node_counter += 1
        return node_id
        
    def _generate_edge_id(self, source: str, target: str) -> str:
        """生成边的ID"""
        return f"{source}-source-{target}-target"
        
    def set_app_config(self, 
                      name: Optional[str] = None,
                      description: Optional[str] = None,
                      icon: Optional[str] = None,
                      icon_background: Optional[str] = None,
                      use_icon_as_answer_icon: Optional[bool] = None):
        """
        设置应用配置
        
        Args:
            name: 应用名称
            description: 应用描述
            icon: 应用图标
            icon_background: 图标背景色
            use_icon_as_answer_icon: 是否使用图标作为回答图标
        """
        if name is not None:
            self.config.app.name = name
        if description is not None:
            self.config.app.description = description
        if icon is not None:
            self.config.app.icon = icon
        if icon_background is not None:
            self.config.app.icon_background = icon_background
        if use_icon_as_answer_icon is not None:
            self.config.app.use_icon_as_answer_icon = use_icon_as_answer_icon
            
    def set_workflow_features(self,
                             opening_statement: Optional[str] = None,
                             enable_file_upload: Optional[bool] = None,
                             file_upload_config: Optional[Dict[str, Any]] = None,
                             enable_speech_to_text: Optional[bool] = None,
                             enable_text_to_speech: Optional[bool] = None,
                             suggested_questions: Optional[List[str]] = None):
        """
        设置工作流功能配置
        
        Args:
            opening_statement: 开场白
            enable_file_upload: 是否启用文件上传
            file_upload_config: 文件上传配置
            enable_speech_to_text: 是否启用语音转文字
            enable_text_to_speech: 是否启用文字转语音
            suggested_questions: 建议问题列表
        """
        if self.config.workflow.features is None:
            self.config.workflow.features = WorkflowFeatures()
            
        if opening_statement is not None:
            self.config.workflow.features.opening_statement = opening_statement
            
        if enable_file_upload is not None:
            if self.config.workflow.features.file_upload is None:
                self.config.workflow.features.file_upload = FileUpload()
            self.config.workflow.features.file_upload.enabled = enable_file_upload
            
        if file_upload_config is not None and self.config.workflow.features.file_upload is not None:
            # 更新文件上传配置
            for key, value in file_upload_config.items():
                if hasattr(self.config.workflow.features.file_upload, key):
                    setattr(self.config.workflow.features.file_upload, key, value)
                    
        if enable_speech_to_text is not None:
            self.config.workflow.features.speech_to_text = {"enabled": enable_speech_to_text}
            
        if enable_text_to_speech is not None:
            self.config.workflow.features.text_to_speech = {"enabled": enable_text_to_speech, "language": "", "voice": ""}
            
        if suggested_questions is not None:
            self.config.workflow.features.suggested_questions = suggested_questions
    
    def add_node(self, 
                 node_id: Optional[str] = None,
                 node_type: str = "llm",
                 position: Optional[Dict[str, float]] = None,
                 title: Optional[str] = None,
                 **kwargs) -> str:
        """
        添加节点
        
        Args:
            node_id: 节点ID，如果不提供则自动生成
            node_type: 节点类型
            position: 节点位置 {"x": 100, "y": 200}
            title: 节点标题
            **kwargs: 节点特定的配置参数
            
        Returns:
            节点ID
        """
        if node_id is None:
            node_id = self._generate_node_id()
            
        if node_type not in DIFY_NODE_TEMPLATES:
            raise ValueError(f"Unsupported node type: {node_type}")
            
        template = deepcopy(DIFY_NODE_TEMPLATES[node_type])
        
        # 设置位置
        if position is None:
            position = {"x": len(self.nodes) * 300 + 30, "y": 227}
            
        node_position = Position(x=position["x"], y=position["y"])
        
        # 创建节点数据
        node_data_kwargs = deepcopy(template["data"])
        if title:
            node_data_kwargs["title"] = title
            
        # 合并用户提供的参数
        node_data_kwargs.update(kwargs)
        
        # 创建节点数据
        node_data = create_node_data(node_type, **node_data_kwargs)
        
        # 创建节点
        node = DifyNode(
            id=node_id,
            data=node_data,
            position=node_position,
            positionAbsolute=node_position,
            width=template.get("width", 244),
            height=template.get("height", 54),
            sourcePosition=template.get("sourcePosition", "right"),
            targetPosition=template.get("targetPosition", "left")
        )
        
        self.nodes[node_id] = node
        return node_id
        
    def add_start_node(self, 
                      node_id: Optional[str] = None,
                      position: Optional[Dict[str, float]] = None,
                      variables: Optional[List[str]] = None) -> str:
        """添加开始节点"""
        if node_id is None:
            node_id = self.START
        return self.add_node(
            node_id=node_id,
            node_type="start", 
            position=position,
            variables=variables or []
        )
        
    def add_end_node(self,
                    node_id: Optional[str] = None, 
                    position: Optional[Dict[str, float]] = None,
                    outputs: Optional[List[str]] = None) -> str:
        """添加结束节点"""
        if node_id is None:
            node_id = self.END
        return self.add_node(
            node_id=node_id,
            node_type="end",
            position=position,
            outputs=outputs or []
        )
        
    def add_llm_node(self,
                    node_id: Optional[str] = None,
                    position: Optional[Dict[str, float]] = None,
                    title: str = "LLM",
                    model_provider: str = "",
                    model_name: str = "",
                    temperature: float = 0.7,
                    system_prompt: str = "",
                    **kwargs) -> str:
        """添加LLM节点"""
        return self.add_node(
            node_id=node_id,
            node_type="llm",
            position=position,
            title=title,
            model={
                "mode": "chat",
                "provider": model_provider,
                "name": model_name,
                "completion_params": {"temperature": temperature}
            },
            prompt_template=[{"role": "system", "text": system_prompt}],
            **kwargs
        )
        
    def add_knowledge_retrieval_node(self,
                                   node_id: Optional[str] = None,
                                   position: Optional[Dict[str, float]] = None,
                                   title: str = "知识检索",
                                   dataset_ids: Optional[List[str]] = None,
                                   top_k: int = 4,
                                   enable_reranking: bool = False,
                                   **kwargs) -> str:
        """添加知识检索节点"""
        return self.add_node(
            node_id=node_id,
            node_type="knowledge-retrieval",
            position=position,
            title=title,
            dataset_ids=dataset_ids or [],
            multiple_retrieval_config={
                "top_k": top_k,
                "reranking_enable": enable_reranking
            },
            **kwargs
        )
        
    def add_edge(self, 
                source: str, 
                target: str,
                source_handle: str = "source",
                target_handle: str = "target") -> str:
        """
        添加边连接两个节点
        
        Args:
            source: 源节点ID
            target: 目标节点ID  
            source_handle: 源句柄
            target_handle: 目标句柄
            
        Returns:
            边ID
        """
        if source not in self.nodes:
            raise ValueError(f"Source node {source} not found")
        if target not in self.nodes:
            raise ValueError(f"Target node {target} not found")
            
        edge_id = self._generate_edge_id(source, target)
        
        # 获取节点类型
        source_type = self.nodes[source].data.type
        target_type = self.nodes[target].data.type
        
        edge = DifyEdge(
            id=edge_id,
            source=source,
            target=target,
            sourceHandle=source_handle,
            targetHandle=target_handle,
            data=EdgeData(
                sourceType=source_type,
                targetType=target_type,
                isInLoop=False
            )
        )
        
        self.edges.append(edge)
        return edge_id
        
    def set_viewport(self, x: float, y: float, zoom: float):
        """设置视口配置"""
        if self.config.workflow.graph is None:
            self.config.workflow.graph = DifyGraphModel()
        self.config.workflow.graph.viewport = Viewport(x=x, y=y, zoom=zoom)
        
    def to_dict(self) -> Dict[str, Any]:
        """导出为字典格式"""
        # 更新图配置
        if self.config.workflow.graph is None:
            self.config.workflow.graph = DifyGraphModel()
            
        self.config.workflow.graph.nodes = list(self.nodes.values())
        self.config.workflow.graph.edges = self.edges
        
        return self.config.model_dump(exclude_none=True)
        
    def to_yaml(self) -> str:
        """导出为YAML格式"""
        config_dict = self.to_dict()
        return yaml.dump(config_dict, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
    def save_yaml(self, file_path: str):
        """保存为YAML文件"""
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(self.to_yaml())
            
    @classmethod
    def from_yaml(cls, file_path: str) -> 'DifyGraph':
        """从YAML文件加载配置"""
        with open(file_path, 'r', encoding='utf-8') as f:
            config_dict = yaml.safe_load(f)
            
        # 创建新的DifyGraph实例
        graph = cls()
        graph.config = DifyConfig(**config_dict)
        
        # 解析节点和边
        if graph.config.workflow and graph.config.workflow.graph:
            if graph.config.workflow.graph.nodes:
                for node in graph.config.workflow.graph.nodes:
                    graph.nodes[node.id] = node
                    
            if graph.config.workflow.graph.edges:
                graph.edges = graph.config.workflow.graph.edges
                
        return graph
